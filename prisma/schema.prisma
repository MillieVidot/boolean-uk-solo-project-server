datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  citizenId String   @unique
  firstName String
  lastName  String
  password  String
  policies  Policy[]
  // NextOfKinsOnUsers NextOfKinsOnUsers[]
}

// model NextOfKinsOnUsers {
//   id          Int        @id @default(autoincrement())
//   userId      Int
//   user        User       @relation(fields: [userId], references: [id])
//   NextOfKinId Int
//   nextOfKin   NextOfKin? @relation(fields: [NextOfKinId], references: [id])
// }

// model NextOfKin {
//   id                Int                 @id @default(autoincrement())
//   citizenId         String              @unique
//   NextOfKinsOnUsers NextOfKinsOnUsers[]
// }

model Policy {
  id               Int                @id @default(autoincrement())
  quoteNumber      String             @unique
  user             User               @relation(fields: [userId], references: [id])
  userId           Int
  cost             Int
  startDate        DateTime
  endDate          DateTime
  status           Status             @relation(fields: [statusId], references: [id])
  statusId         Int
  image            String
  AssetsOnPolicies AssetsOnPolicies[]
}

enum PolicyStages {
  QUOTE_EXPIRED
  POLICY_ACTIVE
  QUOTE_OFFER
  POLICY_CANCELLED
  QUOTE_CANCELLED
}

model Status {
  id     Int          @id @default(autoincrement())
  stage  PolicyStages @default(QUOTE_OFFER)
  Policy Policy[]
}

model AssetsOnPolicies {
  id       Int     @id @default(autoincrement())
  assetId  Int
  Asset    Asset   @relation(fields: [assetId], references: [id])
  policyId Int
  Policy   Policy? @relation(fields: [policyId], references: [id])
}

model Asset {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  cost             Int
  image            String
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id])
  packageId        Int
  package          Package            @relation(fields: [packageId], references: [id])
  AssetsOnPolicies AssetsOnPolicies[]
}

enum PackageCat {
  STRUCTURAL
  MOBILITY
  VITALS
  AREA //arm, leg, head, torso
  SENSES
}

model Package {
  id         Int        @id @default(autoincrement())
  name       String     @unique // not needed??
  cost       Int
  image      String
  packageCat PackageCat
  assets     Asset[]
}

enum CategoryCat {
  STRUCTURAL
  MOBILITY
  VITALS
  NONE
  SENSES
}

model Category {
  id     Int         @id @default(autoincrement())
  name   CategoryCat @default(NONE)
  assets Asset[]
}
